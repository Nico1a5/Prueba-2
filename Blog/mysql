-- 1. Crear la base de datos
CREATE DATABASE IF NOT EXISTS blog_db;
USE blog_db;

-- 2. Crear la tabla blog
CREATE TABLE blog (
    id_blog INT AUTO_INCREMENT PRIMARY KEY,
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    autor VARCHAR(100) NOT NULL,
    titulo VARCHAR(255) NOT NULL,
    contenido TEXT NOT NULL
);

-- 3. Crear la tabla notificacion
CREATE TABLE notificacion (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_blog INT NOT NULL,
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    notificacion VARCHAR(255) NOT NULL,
    FOREIGN KEY (id_blog) REFERENCES blog(id_blog) ON DELETE CASCADE
);

-- 4. Crear el procedimiento almacenado
DELIMITER //

CREATE PROCEDURE InsertarBlogYNotificacion(
    IN p_autor VARCHAR(100),
    IN p_titulo VARCHAR(255),
    IN p_contenido TEXT
)
BEGIN
    DECLARE v_id_blog INT;

    -- Insertar en la tabla blog
    INSERT INTO blog (autor, titulo, contenido) VALUES (p_autor, p_titulo, p_contenido);

    -- Obtener el último id_blog insertado
    SET v_id_blog = LAST_INSERT_ID();

    -- Insertar en la tabla notificacion
    INSERT INTO notificacion (id_blog, notificacion) VALUES (v_id_blog, 'Nueva entrada en el blog');
END //

DELIMITER ;

-- 5. Crear el trigger
DELIMITER //

CREATE TRIGGER EliminarBlogDespuesDeNotificacion
AFTER DELETE ON notificacion
FOR EACH ROW
BEGIN
    -- Eliminar el registro correspondiente en la tabla blog
    DELETE FROM blog WHERE id_blog = OLD.id_blog;
END //

DELIMITER ;

-- 6. Ejemplo práctico

-- Insertar una nueva entrada en el blog y generar una notificación
CALL InsertarBlogYNotificacion('Juan Pérez', 'Mi primer blog', 'Este es el contenido de mi primer blog.');

-- Verificar los datos insertados
SELECT * FROM blog;
SELECT * FROM notificacion;

-- Eliminar una notificación (esto activará el trigger y eliminará la entrada correspondiente en la tabla blog)
DELETE FROM notificacion WHERE id = 1;

-- Verificar que el blog y la notificación se han eliminado
SELECT * FROM blog;
SELECT * FROM notificacion;